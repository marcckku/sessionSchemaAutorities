




################### Mapping Resources Configuration ##########################

spring.mvc.view.prefix: /WEB-INF/jsp/
spring.mvc.view.suffix: .jsp
#spring.mvc.static-path-pattern = /resources/**



################### Mapping Resources Configuration ##########################












### Gia configurato nel SecurityWebConfiguration.java
################### Mapping Resources Configuration - FREE MAKER ##########################
### FreeMarker è un motore di template Java lato server per ambienti web e standalone. 
##  I modelli sono scritti in FreeMarker Template Language (FTL), che è un linguaggio semplice e specializzato.
###spring.freemarker.template-loader-path=classpath:/templates/
###spring.freemarker.suffix=.ftl
##.html

################### Mapping Resources Configuration - FREE MAKER ##########################
















################### Log file for Production  Configuration ##########################

###############Decomenta logging.file.name e spring.profiles.active se vuoi un file essionSchemaAutorities.log per Produzione.
# output to a file
####logging.file.name=sessionSchemaAutorities.log

## if no active profile, default is 'default'
####spring.profiles.active=prod

################### Log file for Production  Configuration ##########################




















################### DataSource Configuration ##########################



server.tomcat.accesslog.enabled = true


##per usare lo schema spring vedi spring-schema.ddl
## spring.datasource.url=jdbc:mysql://localhost:3306/spring-schema?zeroDateTimeBehavior=convertToNull

spring.datasource.url=jdbc:mysql://localhost:3306/test
#spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/flutterwebappdb?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
spring.datasource.username=adminFlutter
spring.datasource.password=adminFlutter
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#com.mysql.jdbc.Driver
# spring.datasource.hikari..login-timeout= 
spring.datasource.hikari.max-lifetime=600000 
#600000 = 10 minutes wait time  hikari.maxLifeTime
spring.datasource.hikari.validationTimeout=600000

#spring.datasource.url=jdbc:mysql://hk-mysql:3306/test?useSSL=false



################### DataSource Configuration ##########################







################### Hibernate Configuration ##########################

#spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
#spring.jpa.show-sql=true
#spring.jpa.hibernate.naming.physical-strategy=org.hibernate.cfg.ImprovedNamingStrategy  

spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.ddl-auto=create
spring.jpa.database-platform=org.hibernate.dialect.MySQL57Dialect
spring.jpa.generate-ddl=true
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
## spring.jpa.properties.hibernate.format_sql=true -->> significa poi inserire Auto nell'id della tua ENTITY. >>> SEQUENCE è meno dispenzionso ma dovresti usare ottimizzazioni di Hibernate
spring.jpa.properties.hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext

################### Hibernate Configuration ##########################













##Se carichi un database che non è incorporato, in Spring Boot 2 devi aggiungere:
spring.datasource.initialization-mode=always









################### Server Embedded Configuration ##########################

#server.port=0  #prende una porta a random
#server.servlet.contextPath=/

server.port=8786
#default secured port (Spring will open it automatically)
#server.port=8443
#additional HTTP port (will open it in UndertowConfig)
#server.http.port=8383



################### Server Embedded Configuration ##########################















################### ACTUATOR Embedded Configuration ##########################
#Un attuatore è un termine di fabbricazione che si riferisce a un dispositivo meccanico 
#per spostare o controllare qualcosa. Gli attuatori possono generare una grande quantità di movimento da una piccola modifica.

#Per configurare l'abilitazione di un endpoint, utilizzare la sua
###    management.endpoints.web.base-path=/manage





################### ACTUATOR Embedded Configuration ##########################























################### CORS Support Configuration ##########################
#Il supporto CORS è disabilitato per impostazione predefinita ed è abilitato solo dopo aver impostato 
#la proprietà management.endpoints.web.cors.allowed-origins. La seguente configurazione consente le 
#chiamate GET e POST dal dominio example.com:
#management.endpoints.web.cors.allowed-origins=https://example.com

##  management.endpoints.web.cors.allowed-origins=http://localhost:8889/
##  management.endpoints.web.cors.allowed-methods=GET,POST


################### CORS Support Configuration ##########################




















################### SECURITY Support Configuration ##########################
#Senza la classe di configurazione base SecurityBasicConfiguration, 
#la password è random del tipo ==> Using generated security password: 2fc47616-d806-48d2-a746-069fd3c71094
#mentre per lo username di Defoult è  =>  user

#Exclude tutte le proprietà default del modulo security di spring
#spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration

## La Classe SecurityBasicConfiguration ha la priorità in quanto al NOME UTENTE E PASSWORD.
## spring.security.user.name=adminFlutterPassBakend   
###spring.security.user.password=adminFlutterPassBakend


################### SECURITY Support Configuration ##########################














################### SECURITY OAuth Support Configuration ##########################

#spring.application.name=jwt-springBoot-oauth


#security.oauth2.resource.jwt.key-uri= # The URI of the JWT token. Can be set if the value is not available and the key is public.
#security.oauth2.resource.jwt.key-value= # The verification key of the JWT token. Can either be a symmetric secret or PEM-encoded RSA public key.
#security.oauth2.resource.jwk.key-set-uri= # The URI for getting the set of keys that can be used to validate the token.



################### SECURITY OAuth Support Configuration ##########################




















################### SESSION Support Configuration ##########################

# Session store type.
spring.session.store-type=jdbc 

# Session timeout. If a duration suffix is not specified, seconds are used.
server.servlet.session.timeout=

# Databaseschema initialization mode.
#spring.session.jdbc.initialize-schema=embedded 


# Name of the database table used to store sessions.
spring.session.jdbc.table-name=SPRING_SESSION 

# Path to the SQL file to use to initialize the database schema.
spring.session.jdbc.initialize-schema=always
spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-mysql.sql
### ddl si prende invece!!




## SPRING.FRAMEWORK.SECURITY - se non funziona 
#spring.session.jdbc.schema=classpath:org/springframework/security/core/userdetails/jdbc/users.ddl
                        
##spring.session.jdbc.schema=classpath:src/main/resources/mysql-spring-schema-users-authorities.sql  
##non funziona  non prende -- DA FARE MANUALMENTE

################### SESSION Support Configuration ##########################




















################### JWT Support Configuration ##########################
#configurazioni utilizzate dal server per l’autenticazione su jwt



#Header in cui il backend si aspetta il token

jwt.header=X-Auth
#chiave segreta utilizzata da jwt
jwt.secret=javainuse
#periodo di validita del token(s) 7200=2h
jwt.expiration: 7200


################### JWT Support Configuration ##########################


